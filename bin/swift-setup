#!/usr/bin/env python

import os
import sys
from optparse import OptionParser
from swift_setup.common.templating import TemplateGen
from swift_setup.node.deploy import DeployNode
from swift_setup.common.exceptions import HostListError, ResponseError
from swift_setup.common.utils import generate_hosts_list


def main():
    _main_usage = '''
    Below are the avaialble swift-setup commands:

    swift-setup init
        The command above should be run on the system where swift-setup
        has been installed. This should be your local system that one
        will use to deploy the swift systems remotely.

        The command above will initialize some of the files
        located under /etc/swift-setup/templates with information
        provided within the swift-settup.conf configuration file.

    swift-setup deploy [options]
        The command above is used to deploy swift nodes such as admin,
        proxy, storage, saio (proxy + storage services) and generic
        swift systems.

        Admin System:
            - git repository server
            - webserver for swift reports
            - central syslog system if dedicated box not available
            - ring builder server
            - proxy setup for account creation management
            - etc ...

        For more information please run 'swift-setup deploy --help'
    '''

    _init_usage = '''
    %prog init
        The command above should be run on the system where swift-setup
        has been installed. This should be your local system that one
        will use to deploy the swift systems remotely.

        The command above will initialize some of the files
        located under /etc/swift-setup/templates with information
        provided within the swift-settup.conf configuration file.
    '''

    _deploy_usage = '''
    swift-setup deploy [options]
        The command above is used to deploy swift nodes such as admin,
        proxy, storage, saio (proxy + storage services) and generic
        swift systems.

        Admin System:
            - git repository server
            - webserver for swift reports
            - central syslog system if dedicated box not available
            - ring builder server
            - proxy setup for account creation management
            - etc ...

        For more information please run 'swift-setup deploy --help'
    '''

    try:
        cmd = sys.argv[1]
    except:
        print "%s" % (_main_usage,)
        sys.exit(1)

    if cmd not in ['init', 'deploy']:
        print "\nInvalid command provided: %s" % (cmd,)
        print "%s" % (_main_usage,)
        sys.exit(1)

    if cmd == 'init':
        _init_parser = OptionParser(usage=_init_usage)
        _init_parser.add_option(
            "-c", "--conf",
            action="store", type="string",
            default="/etc/swift-setup/swift-setup.conf",
            dest="config",
            help='Path to configuration file [default: %default]')

        (options, args) = _init_parser.parse_args()

        if len(args) > 1:
            _init_parser.print_help()
            sys.exit(1)
        else:
            initialize = TemplateGen(options.config,
                                     os.path.dirname(options.config))
            if initialize.template_setup():
                print "\t Template files have been initialized"
                print ("\t Location: %s/templates"
                       % os.path.dirname(options.config))
            else:
                print "\t Template files have already"
                print "\t been initialied before. Aborting..."

    if cmd == 'deploy':
        _deploy_parser = OptionParser(usage=_deploy_usage)
        _deploy_parser.add_option(
            "-c", "--conf",
            action="store", type="string",
            default="/etc/swift-setup/swift-setup.conf",
            dest="config",
            help='Path to configuration file [default: %default]')

        _deploy_parser.add_option(
            "-t", "--type",
            action="store", type="string",
            default="generic", dest="sys_type",
            help='Nodes that could be part of a swift cluster that are '
                 'available to be deployed by this tool. [default: %default] '
                 '[possible types: admin, proxy, storage, saio, generic]')

        _deploy_parser.add_option(
            "-H", "--host",
            action="store", type="string",
            default=None, dest="single_host",
            help="Single host to run the setup against (default: %default)")

        _deploy_parser.add_option(
            "-p", "--platform",
            action="store", type="string",
            default=None, dest="platform",
            help='Hardware Platform Type [default: %default] '
                 '[Available Options: dell]')

        _deploy_parser.add_option(
            "-g", "--group",
            action="store", type="string",
            default=None, dest="host_group",
            help='Uses a host group file that should be located under '
                 '/etc/swift-setup/hosts by default. Use with care and '
                 'make sure the group exists [default: %default]')

        (options, args) = _deploy_parser.parse_args()

        if len(args) > 1:
            _deploy_parser.print_help()
            sys.exit(1)

        '''
        If a host is provided than the setup will
        only happen on this single host as desired
        '''
        if options.single_host:
            host_list = [options.single_host, ]
        elif options.host_group:
            host_list = generate_hosts_list(os.path.dirname(options.config),
                                            options.host_group)
        else:
            status = 404
            msg = "No single host or host group file provided"
            raise HostListError(status, msg)

        node = DeployNode(options.config)
        ret = node.deploy_me(options.sys_type, options.platform, host_list)

        if ret:
            print "\t All node(s) have been deployed successfully"
        else:
            status = 500
            msg = "Node(s) deployement has failed"
            raise ResponseError(status, msg)

    return 0

if __name__ == '__main__':
    status = main()
    #disconnect_all()
    sys.exit(status)
