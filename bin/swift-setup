#!/usr/bin/env python

import os
import sys
from optparse import OptionParser
from swift_setup.common.templating import TemplateGen

def main():

    
    _main_usage = '''
    Below are the avaialble swift-setup commands:
    
    swift-setup templates
        The command above will generate configuration files for the all nodes
        within the swift cluster from the templates provided. Once these
        templates have been generated, one can add/edit/remove as desired
        before calling the 'swift-setup init' command.

    swift-setup init
        The command above will configure the admin system to be used for
        deploying swift nodes. The admin system can have several tasks
        associated with it, among them are:
            - git repository server
            - webserver for swift reports
            - central syslog system if dedicated box not available
            - ring builder server
            - proxy setup for account creation management
            - etc ...
   
    swift-setup deploy [options]
        The command above is used to deploy swift nodes such as proxy, storage
        or all-in-one nodes (proxy + storage services). To view more
        information on 'deploy' command please run 'swift-setup help deploy'.
        
        For more information please run 'swift-setup deploy --help'
    '''

    _templates_usage = '''
    %prog templates

    The command above will generate configuration files for the all nodes
    within the swift cluster from the templates provided. Once these
    templates have been generated, one can add/edit/remove as desired
    before calling the 'swift-setup init' command.

    The generated files will be located under /etc/swift-setup/templates
    '''

    _init_usage = '''
    %prog init
        The command above will configure the admin system to be used for
        deploying swift nodes. The admin system can have several tasks
        associated with it, among them are:
            - git repository server
            - webserver for swift reports
            - central syslog system if dedicated box not available
            - ring builder server
            - proxy setup for account creation management
            - etc ...
    '''
    
    _deploy_usage = '''
    swift-setup deploy [options]
        The command above is used to deploy swift nodes such as proxy, storage
        or all-in-one nodes (proxy + storage services). To view more
        information on 'deploy' command please run 'swift-setup help deploy'.
        
        For more information please run 'swift-setup deploy --help'
    '''

    try:
        cmd = sys.argv[1]
    except:
        print "%s" % (_main_usage,)
        sys.exit(1)

    if cmd not in ['templates', 'init', 'deploy']:
        print "\nInvalid command provided: %s" % (cmd,)
        print "%s" % (_main_usage,)
        sys.exit(1)        
    

    if cmd == 'templates':
        _templates_parser = OptionParser(usage=_templates_usage)
        _templates_parser.add_option("-c", "--conf",
            action="store", type="string",
            default="/etc/swift-setup/swift-setup.conf",
            dest="config",
            help='Path to configuration file [default: %default]')
        (options, args) = _templates_parser.parse_args()

        if len(args) > 1:
            _templates_parser.print_help()
            sys.exit(1) 
    
        if not os.path.exists(config):
            status = 500
            msg = 'No Config file could be located (%s)' % (config,)
            raise NoConfigeError(status, msg)

        retval = make_templates(config)
        if retval: 
            print "Template files have been successfully generated"

    if cmd == 'init':
        _init_parser = OptionParser(usage=_init_usage)
        _init_parser.add_option("-c", "--conf",
            action="store", type="string",
            default="/etc/swift-setup/swift-setup.conf",
            dest="config",
            help='Path to configuration file [default: %default]')
        (options, args) = _init_parser.parse_args()

        if len(args) > 1:
            _init_parser.print_help()
            sys.exit(1) 
        else:
            print "calling init function\n"
            initialize = TemplateGen(config, os.path.dirname(config))
            ret = initialize.templates()

    if cmd == 'deploy':
        _deploy_parser = OptionParser(usage=_deploy_usage)
        _deploy_parser.add_option("-c", "--conf",
            action="store", type="string",
            default="/etc/swift-setup/swift-setup.conf",
            dest="config",
            help='Path to configuration file [default: %default]')
        
        _deploy_parser.add_option("-r", "--release",
            action="store", type="string",
            default="precise", dest="release",
            help='Distribution release version '
                 '[default: %default] '
                 '[options: lucid, precise]')

        _deploy_parser.add_option("-t", "--type",
            action="store", type="string",
            default="generic", dest="sys_type",
            help='Nodes that could be part of a swift cluster that are '
                 'available to be deployed by this tool. [default: %default] '
                 '[possible types: proxy, storage, saio, generic, lb, syslog] '
                 'NOTE: These must be DSH groups as well')

        _deploy_parser.add_option("-H", "--host",
            action="store", type="string",
            default=None, dest="single_host",
            help="Single host to run the setup against (default: %default)")

        _deploy_parser.add_option("-p", "--platform",
           action="store", type="string",
           default=None, dest="platform",
           help='Hardware Platform Type [default: %default] '
                '[Available Options: dell]')

        _deploy_parser.add_option("-g", "--dsh-group",
            action="store", type="string",
            default=None, dest="dsh_group",
            help='Uses the indicated DSH group instead of trying to use '
                 'a group that matches the system type to be deployed. '
                 'Use with care and make sure the group exists '
                 '[default: %default]')

        (options, args) = _deploy_parser.parse_args()

        if len(args) > 1:
            _deploy_parser.print_help()
            sys.exit(1) 
        else:
            print "calling deploy function\n"


    return 0


if __name__ == '__main__':
    status = main()
    #disconnect_all()
    sys.exit(status)
